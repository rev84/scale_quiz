// Generated by CoffeeScript 1.10.0
var Utl, answer, initAudio, onResize, playSound, refresh, startGame, startQuestion, startTimer, stopTimer;

window.currentQuestion = null;

window.questionCount = 0;

window.correctCount = 0;

window.score = 0;

window.questions = [];

window.refreshTimer = null;

window.audios = {};

$().ready(function() {
  $('#start_game').on('click', function() {
    return startGame();
  });
  $('.alt').on('click', function() {
    return answer(Number($(this).data('answer')));
  });
  return initAudio();
});

startGame = function() {
  if (!$('#question_start').hasClass('no_display')) {
    $('#question_start').addClass('no_display');
  }
  if ($('#question_body').hasClass('no_display')) {
    $('#question_body').removeClass('no_display');
  }
  window.currentQuestion = null;
  window.questionCount = 0;
  window.correctCount = 0;
  window.score = 0;
  window.questions = Utl.shuffle(Utl.clone(window.QUESTION_BASE));
  return startQuestion();
};

startQuestion = function() {
  var q;
  q = window.questions.pop();
  q.started = +(new Date());
  window.currentQuestion = q;
  window.questionCount++;
  return startTimer(100);
};

answer = function(answerId) {
  if (window.currentQuestion === null) {
    return;
  }
  if (answerId === window.currentQuestion.answer) {
    playSound('correct');
  } else {
    playSound('wrong');
  }
  return startQuestion();
};

refresh = function() {
  var restSec;
  $('#status_count').html('第' + window.questionCount + '問');
  if (window.currentQuestion !== null) {
    restSec = Math.floor((+new Date()) - window.currentQuestion.started) / 1000;
    $('#status_timer').html(restSec + '秒');
  }
  if (window.currentQuestion === null) {
    $('#question_text').html('');
    return $('#question_plus').html('');
  } else {
    $('#question_text').html(window.currentQuestion.question);
    return $('#question_plus').html(window.currentQuestion.plus);
  }
};

stopTimer = function() {
  if (window.refreshTimer !== null) {
    clearInterval(window.refreshTimer);
  }
  return window.refreshTimer = null;
};

startTimer = function(ms) {
  if (ms == null) {
    ms = 1000;
  }
  stopTimer();
  return window.refreshTimer = setInterval(refresh, ms);
};

onResize = function() {
  if (window.currentQuestion !== null) {
    return window.currentQuestion.fontSize = 0.8 * Utl.getFillFontSize($('#question_text'), window.currentQuestion.question);
  }
};

initAudio = function() {
  var body, index, j, name, ref;
  ref = window.RESOURCES.wav;
  for (name in ref) {
    body = ref[name];
    window.audios[name] = [];
    for (index = j = 0; j < 5; index = ++j) {
      window.audios[name].push(new Audio(body));
    }
  }
  return true;
};

playSound = function(resource) {
  var aud;
  while (window.audios[resource].length > 0) {
    aud = window.audios[resource].shift();
    window.audios[resource].push(new Audio(window.RESOURCES.wav[resource]));
    if (aud.readyState === 4) {
      return aud.play();
    }
  }
};

window.QUESTION_BASE = [
  {
    "answer": 3,
    "plus": "",
    "explain": "",
    "question": "1％ = ◯分の一"
  }, {
    "answer": 4,
    "plus": "",
    "explain": "",
    "question": "1‰ = ◯分の一"
  }, {
    "answer": 4,
    "plus": "1990年",
    "explain": "1191件",
    "question": "東証一部上場企業"
  }, {
    "answer": 4,
    "plus": "",
    "explain": "",
    "question": "1kg = ◯g"
  }, {
    "answer": 4,
    "plus": "2017年",
    "explain": "3,093人",
    "question": "東京大学　入学者"
  }, {
    "answer": 3,
    "plus": "2016年",
    "explain": "100万人",
    "question": "東ティモール　人口　◯万人"
  }, {
    "answer": 2,
    "plus": "日本　2017年",
    "explain": "378,000 km²",
    "question": "国土面積　◯万km²"
  }, {
    "answer": 4,
    "plus": "",
    "explain": "1,096km（山陽自動車道経由）",
    "question": "東京⇔博多　◯km"
  }, {
    "answer": 4,
    "plus": "日本　2016年",
    "explain": "968人",
    "question": "熱中症による死亡数"
  }, {
    "answer": 2,
    "plus": "日本　2016年末",
    "explain": "23人+1団体",
    "question": "国民栄誉賞　受賞者"
  }, {
    "answer": 2,
    "plus": "日本　2017年",
    "explain": "47都道府県",
    "question": "都道府県"
  }, {
    "answer": 3,
    "plus": "日本　2017年3月",
    "explain": "76万493人",
    "question": "税理士　◯万人"
  }, {
    "answer": 3,
    "plus": "日本　2014年",
    "explain": "409万8284社",
    "question": "企業　◯万社"
  }, {
    "answer": 4,
    "plus": "日本　2015年",
    "explain": "779校",
    "question": "国立大学　◯校"
  }, {
    "answer": 3,
    "plus": "2015年",
    "explain": "223万2189人",
    "question": "在日外国人　◯万人"
  }, {
    "answer": 1,
    "plus": "日本　2015年",
    "explain": "3万6415人",
    "question": "弁護士　◯万人"
  }, {
    "answer": 2,
    "plus": "日本　2015年",
    "explain": "25兆1816億円",
    "question": "外食産業の市場規模　◯兆円"
  }, {
    "answer": 4,
    "plus": "世界合計　2016年7月",
    "explain": "1052件",
    "question": "世界遺産"
  }, {
    "answer": 3,
    "plus": "2017年4月",
    "explain": "99万2026件",
    "question": ".jpドメインの数　◯万件"
  }, {
    "answer": 3,
    "plus": "2016年度",
    "explain": "325万3000人",
    "question": "神戸ルミナリエ来場者数　◯万人"
  }, {
    "answer": 2,
    "plus": "日本　2014年",
    "explain": "31万1205人",
    "question": "医師　◯万人"
  }, {
    "answer": 2,
    "plus": "日本　2014年",
    "explain": "10万3972人",
    "question": "歯科医師　◯万人"
  }, {
    "answer": 2,
    "plus": "日本　2014年",
    "explain": "28万8151人",
    "question": "薬剤師　◯万人"
  }, {
    "answer": 1,
    "plus": "日本　2016年",
    "explain": "2万1764人",
    "question": "自殺者　◯万人"
  }, {
    "answer": 4,
    "plus": "日本　2013年",
    "explain": "820万戸",
    "question": "空き家　◯万戸"
  }, {
    "answer": 3,
    "plus": "日本　2015年",
    "explain": "56万人",
    "question": "ニート　◯万人"
  }, {
    "answer": 3,
    "plus": "日本　2014年",
    "explain": "244.9人",
    "question": "人口10万人あたりの医師"
  }, {
    "answer": 3,
    "plus": "日本　2015年",
    "explain": "103万2791件",
    "question": "刑事事件　◯万件"
  }, {
    "answer": 2,
    "plus": "日本　2015年",
    "explain": "9万4889件",
    "question": "少年事件　◯万件"
  }, {
    "answer": 2,
    "plus": "日本　2014年",
    "explain": "40兆8071億円",
    "question": "国民医療費　◯兆円"
  }, {
    "answer": 4,
    "plus": "日本　2014年",
    "explain": "3450軒",
    "question": "銭湯"
  }, {
    "answer": 3,
    "plus": "日本　2013年",
    "explain": "307万2700世帯",
    "question": "年収1000万円以上の世帯　◯万世帯"
  }
];

Utl = (function() {
  function Utl() {}

  Utl.numFormat = function(num) {
    return String(num).replace(/(\d)(?=(\d\d\d)+(?!\d))/g, '$1,');
  };

  Utl.rand = function(min, max) {
    return Math.floor(Math.random() * (max - min + 1)) + min;
  };

  Utl.genPassword = function(length) {
    var chars, i, j, ref, res;
    if (length == null) {
      length = 4;
    }
    chars = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';
    res = '';
    for (i = j = 0, ref = length; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
      res += chars.substr(this.rand(0, chars.length - 1), 1);
    }
    return res;
  };

  Utl.adrBar = function(url) {
    return window.history.replaceState('', '', '' + url);
  };

  Utl.getQuery = function(key, defaultValue) {
    var j, k, len, p, params, query, ref, res, v;
    if (key == null) {
      key = null;
    }
    if (defaultValue == null) {
      defaultValue = null;
    }
    query = document.location.search.substring(1);
    params = query.split('&');
    res = {};
    for (j = 0, len = params.length; j < len; j++) {
      p = params[j];
      ref = p.split('='), k = ref[0], v = ref[1];
      res[k] = v;
    }
    if (key === null) {
      return res;
    }
    if (res[key] != null) {
      return res[key];
    }
    return defaultValue;
  };

  Utl.normalize = function(num, min, max) {
    var range;
    if (min == null) {
      min = 0;
    }
    if (max == null) {
      max = 1;
    }
    range = Math.abs(max - min);
    if (num < min) {
      num += range * Math.ceil(Math.abs(num - min) / range);
    } else if (max <= num) {
      num -= range * (Math.floor(Math.abs(num - max) / range) + 1);
    }
    return num;
  };

  Utl.time = function(date) {
    if (date == null) {
      date = null;
    }
    if (date === null) {
      date = new Date();
    }
    return Math.floor(+date / 1000);
  };

  Utl.militime = function(date, getAsFloat) {
    if (date == null) {
      date = null;
    }
    if (getAsFloat == null) {
      getAsFloat = false;
    }
    if (date === null) {
      date = new Date();
    }
    return +date / (getAsFloat ? 1000 : 1);
  };

  Utl.dateStr = function(date, dateSep) {
    if (date == null) {
      date = null;
    }
    if (dateSep == null) {
      dateSep = '-';
    }
    if (date === null) {
      date = new Date();
    }
    return '' + this.zerofill(date.getFullYear(), 4) + dateSep + this.zerofill(date.getMonth() + 1, 2) + dateSep + this.zerofill(date.getDate(), 2);
  };

  Utl.datetimeStr = function(date, dateSep, timeSep, betweenSep) {
    if (date == null) {
      date = null;
    }
    if (dateSep == null) {
      dateSep = '-';
    }
    if (timeSep == null) {
      timeSep = ':';
    }
    if (betweenSep == null) {
      betweenSep = ' ';
    }
    if (date === null) {
      date = new Date();
    }
    return this.dateStr(date, dateSep) + betweenSep + this.zerofill(date.getHours(), 2) + timeSep + this.zerofill(date.getMinutes(), 2) + timeSep + this.zerofill(date.getSeconds(), 2);
  };

  Utl.difftime = function(targetDate, baseDate, nowSec, nowStr, agoStr, secStr, minStr, hourStr, dayStr, monStr, yearStr) {
    var baseTime, d, diffTime, h, m, mo, targetTime, y;
    if (baseDate == null) {
      baseDate = null;
    }
    if (nowSec == null) {
      nowSec = 0;
    }
    if (nowStr == null) {
      nowStr = 'ついさっき';
    }
    if (agoStr == null) {
      agoStr = '前';
    }
    if (secStr == null) {
      secStr = '秒';
    }
    if (minStr == null) {
      minStr = '分';
    }
    if (hourStr == null) {
      hourStr = '時間';
    }
    if (dayStr == null) {
      dayStr = '日';
    }
    if (monStr == null) {
      monStr = '月';
    }
    if (yearStr == null) {
      yearStr = '年';
    }
    if (baseDate === null) {
      baseTime = this.time();
    }
    targetTime = this.time(targetDate);
    diffTime = baseTime - targetTime;
    if (diffTime < 0) {
      return null;
    }
    if (nowSec >= diffTime) {
      return nowStr;
    }
    y = Math.floor(diffTime / (60 * 60 * 24 * 30 * 12));
    if (y > 0) {
      return '' + y + yearStr + agoStr;
    }
    diffTime -= y * (60 * 60 * 24 * 30 * 12);
    mo = Math.floor(diffTime / (60 * 60 * 24 * 30));
    if (mo > 0) {
      return '' + mo + monStr + agoStr;
    }
    diffTime -= mo * (60 * 60 * 24 * 30);
    d = Math.floor(diffTime / (60 * 60 * 24));
    if (d > 0) {
      return '' + d + dayStr + agoStr;
    }
    diffTime -= d * (60 * 60 * 24);
    h = Math.floor(diffTime / (60 * 60));
    if (h > 0) {
      return '' + h + hourStr + agoStr;
    }
    diffTime -= h * (60 * 60);
    m = Math.floor(diffTime / 60);
    if (m > 0) {
      return '' + m + minStr + agoStr;
    }
    diffTime -= m * 60;
    if (diffTime > 0) {
      return '' + diffTime + secStr + agoStr;
    }
    return nowStr;
  };

  Utl.zerofill = function(num, digit) {
    return ('' + this.repeat('0', digit) + num).slice(-digit);
  };

  Utl.repeat = function(str, times) {
    return Array(1 + times).join(str);
  };

  Utl.shuffle = function(ary) {
    var i, n, ref;
    n = ary.length;
    while (n) {
      n--;
      i = this.rand(0, n);
      ref = [ary[n], ary[i]], ary[i] = ref[0], ary[n] = ref[1];
    }
    return ary;
  };

  Utl.inArray = function(needle, ary) {
    var j, len, v;
    for (j = 0, len = ary.length; j < len; j++) {
      v = ary[j];
      if (v === needle) {
        return true;
      }
    }
    return false;
  };

  Utl.clone = function(obj) {
    var res;
    res = obj;
    if ($.isArray(obj)) {
      res = $.extend(true, [], obj);
    } else if (obj instanceof Object) {
      res = $.extend(true, {}, obj);
    }
    return res;
  };

  Utl.arrayFill = function(length, val) {
    var i, j, ref, res;
    if (val == null) {
      val = null;
    }
    res = [];
    for (i = j = 0, ref = length; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
      res[i] = this.clone(val);
    }
    return res;
  };

  Utl.array2dFill = function(x, y, val) {
    var j, l, ref, ref1, res, xx, yAry, yy;
    if (y == null) {
      y = null;
    }
    if (val == null) {
      val = null;
    }
    if (y === null) {
      y = x;
    }
    res = [];
    yAry = [];
    for (yy = j = 0, ref = y; 0 <= ref ? j < ref : j > ref; yy = 0 <= ref ? ++j : --j) {
      yAry[yy] = this.clone(val);
    }
    for (xx = l = 0, ref1 = x; 0 <= ref1 ? l < ref1 : l > ref1; xx = 0 <= ref1 ? ++l : --l) {
      res[xx] = this.clone(yAry);
    }
    return res;
  };

  Utl.arraySum = function(ary) {
    var j, len, sum, v;
    sum = 0;
    for (j = 0, len = ary.length; j < len; j++) {
      v = ary[j];
      sum += v;
    }
    return sum;
  };

  Utl.arrayMin = function(ary) {
    var j, len, min, v;
    min = null;
    for (j = 0, len = ary.length; j < len; j++) {
      v = ary[j];
      if (min === null || min > v) {
        min = v;
      }
    }
    return min;
  };

  Utl.arrayMax = function(ary) {
    var j, len, max, v;
    max = null;
    for (j = 0, len = ary.length; j < len; j++) {
      v = ary[j];
      if (max === null || max < v) {
        max = v;
      }
    }
    return max;
  };

  Utl.count = function(object) {
    return Object.keys(object).length;
  };

  Utl.uuid4 = function() {
    var i, j, random, uuid;
    uuid = '';
    for (i = j = 0; j < 32; i = ++j) {
      random = Math.random() * 16 | 0;
      if (i === 8 || i === 12 || i === 16 || i === 20) {
        uuid += '-';
      }
      uuid += (i === 12 ? 4 : (i === 16 ? random & 3 | 8 : random)).toString(16);
    }
    return uuid;
  };

  Utl.getFillFontSize = function(target, string) {
    var fontFamily, fontSize, targetWidth, temp, tempWidth;
    fontSize = parseInt($(target).css('font-size'), 10);
    fontFamily = $(target).css('font-family');
    temp = $('<div>').css({
      display: 'none',
      "font-family": fontFamily,
      'font-size': fontSize
    });
    temp.text(string).appendTo('body');
    targetWidth = $(target).width();
    tempWidth = temp.width();
    while (tempWidth < targetWidth) {
      fontSize *= targetWidth / tempWidth;
      temp.css('font-size', fontSize + 'px');
      tempWidth = temp.width();
    }
    while (tempWidth >= targetWidth) {
      fontSize--;
      temp.css('font-size', fontSize + 'px');
      tempWidth = temp.width();
    }
    temp.remove();
    return fontSize;
  };

  Utl.delLs = function(key) {
    return localStorage.removeItem(key);
  };

  Utl.setLs = function(key, value) {
    var json;
    if (value == null) {
      value = null;
    }
    if (value === null) {
      return this.delLs(key);
    }
    json = JSON.stringify(value);
    return localStorage.setItem(key, json);
  };

  Utl.getLs = function(key) {
    var error, res;
    res = localStorage.getItem(key);
    try {
      res = JSON.parse(res);
    } catch (error) {
      res = null;
    }
    return res;
  };

  return Utl;

})();
